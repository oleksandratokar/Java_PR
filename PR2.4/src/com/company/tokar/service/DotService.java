package com.company.tokar.service;

import com.company.tokar.model.Dot;

import java.util.HashSet;
import java.util.Random;
import java.util.Scanner;

public class DotService {
    private static HashSet<Dot> dots;

    public static void createDots() {
        Scanner scanner = new Scanner(System.in);

        menu:
        while(true) {
            dots = new HashSet<>();
            System.out.println("1)Create dots");
            System.out.println("2)Generate dots automatically");
            System.out.println("3)Exit");
            System.out.println();

            if (scanner.hasNextLine()) {
                switch (scanner.nextLine()) {
                    case "1":
                        createDotsByUser(scanner);
                        break;
                    case "2":
                        autoCreateDots();
                        break;
                    case "3":
                        return;
                }
            }
            calcDistances();
            showDots();
            showBiggestLengthDot();
        }

    }

    private static void createDotsByUser(Scanner scanner) {
        createMenu:
        while(true) {
            Dot dot = new Dot();
            int x, y;
            while(true) {
                System.out.println("Input x");
                if (scanner.hasNextLine()) {
                    try {
                        x = Integer.parseInt(scanner.nextLine());
                        dot.setX(x);
                        break;
                    } catch (NumberFormatException e) {
                        System.out.println();
                        System.out.println("Not a number");
                        System.out.println();
                    }
                }
            }

            while(true) {
                System.out.println("Input y");
                if (scanner.hasNextLine()) {
                    try {
                        y = Integer.parseInt(scanner.nextLine());
                        dot.setY(y);
                        break;
                    } catch (NumberFormatException e) {
                        System.out.println();
                        System.out.println("Not a number");
                        System.out.println();
                    }
                }
            }

            dots.add(dot);
            String line;
            while(true) {
                System.out.println("Exit or continue?");

                if (scanner.hasNextLine()) {
                    line = scanner.nextLine();
                    if (line.equalsIgnoreCase("exit")) {
                        break createMenu;
                    } else if(line.equalsIgnoreCase("continue")) {
                        break;
                    }
                }
            }
        }
    }

    private static void autoCreateDots() {
        Random rnd = new Random();
        for (int i = 0; i < 10; i++) {
            dots.add(new Dot(rnd.nextInt(1000), rnd.nextInt(1000)));
        }
        System.out.println();
        System.out.println("Dots was autoGenerated");
    }

    private static void showBiggestLengthDot() {
        Dot biggestDot = new Dot();
        double biggestDistance = 0;
        double currentSum;

        for (Dot dot : dots) {
            currentSum = dot.getDistanceSum();

            if (currentSum > biggestDistance) {
                biggestDistance = currentSum;
                biggestDot = dot;
            }
        }

        System.out.println("Dot with the biggest distance");
        System.out.println(biggestDot.toString());
    }

    private static void calcDistances() {
        double distancesSum = 0;
        for(Dot dot: dots) {
            for(Dot anotherDot: dots) {
                if (!dot.equals(anotherDot)) {
                    distancesSum += Math.sqrt(Math.pow(anotherDot.getX() - dot.getX(), 2) + Math.pow(anotherDot.getY() - dot.getY(), 2));
                }
            }
            dot.setDistanceSum(distancesSum);
            distancesSum = 0;
        }
    }


    private static void showDots() {
        System.out.println("+++++++++++++++");
        System.out.println("Dots");
        System.out.println("+++++++++++++++");
        for (Dot dot: dots) {
            System.out.println(dot.toString());
        }
        System.out.println();
    }


}
